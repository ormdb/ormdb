**`GetTableInstance`** is used to initialize the instance of **[Table.Base.Generic]**, according to table-information in database.

<br/>

**Definition**
``````XXX
```C#
namespace Connection {
    public class DDL {

        public Table.Base.Generic GetTableInstance(string TableName){}
```
```VB
NameSpace Connection
    Public Class DDL

        Public Function GetTableInstance(TableName As String) As Table.Base.Generic
```
``````

<br/>

**Examples**

>Examples shown below needs the [Example Header](##OTH-Example-Header).

<br/>

Following section demonstrates generating the instance of the table.

``````XXX
```C#
var tb = cn.DDL.GetTableInstance("table1");
```
```VB
Dim tb = cn.DDL.GetTableInstance("table1")
```
``````

<br/>

Following section demonstrates reading the informations from table-instance.

``````XXX
```C#
// Reading table columns...
foreach ( var col in tb.GetColumns() ){
    Debug.WriteLine($"{col.Catalog}.{col.Schema}.{col.Table}.{col.Name}");
}

// Reading table indexes...
foreach ( var index in tb.GetIndexes() ){

    Debug.WriteLine($"{index.Name}, is primary={index.IsPrimary}");

    Debug.WriteLine($"Columns");
    Debug.WriteLine($"----------------------------");

    foreach (var col in index.Columns){
        Debug.WriteLine($"{col.Name} {(index.IsDescending? "DESC" : "ASC")}");
    }
}
```
```VB
' Reading table columns...
For Each col In tb.GetColumns()
    Debug.WriteLine($"{col.Catalog}.{col.Schema}.{col.Table}.{col.Name}")
Next

' Reading table indexes...
For Each index In tb.GetIndexes()

    Debug.WriteLine($"{index.Name}, is primary={index.IsPrimary}")

    Debug.WriteLine($"Columns")
    Debug.WriteLine($"----------------------------")

    For Each col In index.Columns
        Debug.WriteLine($"{col.Name} {(index.IsDescending? "DESC" : "ASC")}")
    Next
Next
```
``````

<br/>
