<k>GetTableInstance</k> is used to initialize the instance of <b>[Table.Base.Generic]</b>, according to table-information in database.


<st>Definition</st>
<co type="light">
	<small><b>Namespace : </b>Odb.Connection.DDL</small>
</co>
<code-tab>
	<code lang="c#">
		public Table.Base.Generic GetTableInstance(string TableName)
	</code>
	<code lang="vb">
		Public Function GetTableInstance(TableName As String) As Table.Base.Generic
	</code>
</code-tab>

<st>Examples</st>
<ew/>
<br/>
<br/>

Following section demonstrates generating the instance of the table.
<code-tab>
	<code lang="c#">
		var tb = cn.DDL.GetTableInstance("table1");
	</code>
	<code lang="vb">
		Dim tb = cn.DDL.GetTableInstance("table1")
	</code>
</code-tab>

<br/>

Following section demonstrates reading the informations from table-instance.
<code-tab>
	<code lang="c#">
		// Reading table columns...
		foreach ( var col in tb.GetColumns() ){
			Debug.WriteLine($"{col.Catalog}.{col.Schema}.{col.Table}.{col.Name}");
		}

		// Reading table indexes...
		foreach ( var index in tb.GetIndexes() ){

			Debug.WriteLine($"{index.Name}, is primary={index.IsPrimary}");

			Debug.WriteLine($"Columns");
			Debug.WriteLine($"----------------------------");

			foreach (var col in index.Columns){
				Debug.WriteLine($"{col.Name} {(index.IsDescending? "DESC" : "ASC")}");
			}
		}
	</code>
	<code lang="vb">
		' Reading table columns...
		For Each col In tb.GetColumns()
			Debug.WriteLine($"{col.Catalog}.{col.Schema}.{col.Table}.{col.Name}")
		Next

		' Reading table indexes...
		For Each index In tb.GetIndexes()

			Debug.WriteLine($"{index.Name}, is primary={index.IsPrimary}")

			Debug.WriteLine($"Columns")
			Debug.WriteLine($"----------------------------")

			For Each col In index.Columns
				Debug.WriteLine($"{col.Name} {(index.IsDescending? "DESC" : "ASC")}")
			Next
		Next
	</code>
</code-tab>