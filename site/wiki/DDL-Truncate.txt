**`TRUNCATE`** method is used to delete existing records in a table like **`DELETE`**. 

> **`TRUNCATE`** process also executes the **`UPDATE STATISTICS`** for tables, after "DELETE" operation.

<br/>

**Definition**
``````XXX
```C#
namespace Connection {
    public class DDL {

        public List<string> Truncate(IEnumerable<Table.Base> Tables, 
									 bool OnlyGenerateScript = false){}
        public List<string> Truncate(IEnumerable<string> TableNames, 
									 bool OnlyGenerateScript = false){}

        public string Truncate(Table.Base Table, 
							   bool OnlyGenerateScript = false){}
        public string Truncate(string TableName, 
							   bool OnlyGenerateScript = false){}
```
```VB
NameSpace Connection
    Public Class DDL

        Public Function Truncate(Tables As IEnumerable(Of Table.Base), 
								 OnlyGenerateScript As Boolean = False) As List(Of String)
        Public Function Truncate(TableNames As IEnumerable(Of String), 
								 OnlyGenerateScript As Boolean = False) As List(Of String)

        Public Function Truncate(Table As Table.Base, 
								 OnlyGenerateScript As Boolean = False) As String
        Public Function Truncate(TableName As String, 
								 OnlyGenerateScript As Boolean = False) As String
```
``````

<br/>

**Examples**

>Examples shown below needs the [Example Header](##OTH-Example-Header).

<br/>

Following section demonstrates **`TRUNCATE`** the table(s).

``````XXX
```C#
// single table by instance
cn.DDL.Truncate(h);

// multi table by instance
cn.DDL.Truncate({h, l});

// single table by name
cn.DDL.Truncate("table1");
```
```VB
' single table by instance
cn.DDL.Truncate(h)

' multi table by instance
cn.DDL.Truncate({h, l})

' single table by name
cn.DDL.Truncate("table1")
```
``````

<br/>

Following section demonstrates how to generate **`TRUNCATE`** script.

``````XXX
```C#
var script = cn.DDL.Truncate(h, true);
```
```VB
Dim script = cn.DDL.Truncate(h, True)
```
``````

<br/>