Column(s) type of <k>Odb.Table.Column</k> are also defined by supplying necessary type information in the attribute.
If a column-type is often used in many of your tables, you can use a column as a reference.
You can use the column-types as shown below, in the table definitions by <b>OrmDB</b>.

<st>Definition</st>
<co type="light">
	<small><b>Namespace : </b>Odb.Table</small>
</co>

<st>Column Types</st>
<table>
	<thead>
		<tr>
			<th></th>
			<th>MsSql</th>
			<th>MySql</th>
			<th>PostgreSql</th>
			<th>Oracle</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><b>ColumnString</b><br/><br/> <k>System.String</k></td>
			<td>varchar</td>
			<td>VARCHAR</td>
			<td>VARCHAR</td>
			<td>NVARCHAR2 / CLOB</td>
		</tr>
		<tr>
			<td><b>ColumnNumeric</b><br/><br/> Any .NET numeric types such as <k>int[16/32/64]</k>, <k>sigle</k>, <k>double</k>, <k>decimal</k> etc.</td>
			<td>numeric</td>
			<td>DECIMAL</td>
			<td>NUMERIC</td>
			<td>NUMBER</td>
		</tr>
		<tr>
			<td><b>ColumnBoolean</b><br/><br/> <k>System.Boolean</k></td>
			<td>bit</td>
			<td>TINYINT(1)</td>
			<td>BOOLEAN</td>
			<td>NUMBER(1)</td>
		</tr>
		<tr>
			<td><b>ColumnBinary</b><br/><br/> Array of <k>System.Byte</k></td>
			<td>image</td>
			<td>BLOB</td>
			<td>BYTEA</td>
			<td>BLOB</td>
		</tr>
		<tr>
			<td><b>ColumnTime</b><br/><br/> <k>System.TimeSpan</k></td>
			<td>time</td>
			<td>TIME</td>
			<td>TIME</td>
			<td>INTERVAL DAY(0) TO SECOND(0)</td>
		</tr>
		<tr>
			<td><b>ColumnDate</b><br/><br/> <k>System.DateTime</k></td>
			<td>date</td>
			<td>DATE</td>
			<td>DATE</td>
			<td>DATE</td>
		</tr>
		<tr>
			<td><b>ColumnDateTime</b><br/><br/> <k>System.DateTime</k></td>
			<td>datetime2(0)</td>
			<td>DATETIME(0)</td>
			<td>TIMESTAMP(0)</td>
			<td>TIMESTAMP(0)</td>
		</tr>
		<tr>
			<td><b>ColumnRef</b><br/><br/> Reference column</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td colspan="5" class="table-muted">
				<b>ColumnInt</b>&nbsp;&nbsp;<span class="bg-danger text-white p-1">Deprecated</span>
				<br/><br/>
				<co type="danger">
					There is no INTEGER data type for all databases because an INTEGER is a number with no decimal precision in ANSI standards.
				</co>
				<br/>
				<table class="table table-light table-bordered" style="max-width:450px;">
					<thead class="thead-dark">
						<tr><th>SubType</th>			<th>Accept As</th>				<th>Byte Size</th>	</tr>
					</thead>
					<tbody>
						<tr><td>Int8 / tinyint</td>		<td>ColumnNumeric(3, 0)</td>	<td>3</td>			</tr>
						<tr><td>Int16 / smallint</td>	<td>ColumnNumeric(5, 0)</td>	<td>5</td>			</tr>
						<tr><td>Int32 / int</td>		<td>ColumnNumeric(10, 0)</td>	<td>9</td>			</tr>
						<tr><td>Int64 / bigint</td>		<td>ColumnNumeric(19, 0)</td>	<td>9</td>			</tr>
					</tbody>
				</table>
				These types are not supported only for definition. But you can allways use these types in database. 
			</td>
		</tr>
	</tbody>
</table>

<br/><br/>

All column types has the properties as shown below.
<table>
	<thead>
		<th>Property Name</th>
		<th>Description</th>
	</thead>
	<tr>
		<td class="text-nowrap"><b>c</b> - ColumnName</td>
		<td>Optional. It is the name of the column.</td>
	</tr>
	<tr>
		<td class="text-nowrap"><b>d</b> - Description</td>
		<td>Optional. It is the description of the column.</td>
	</tr>
	<tr>
		<td class="text-nowrap"><b>n</b> - Nullable</td>
		<td>Optional. This constraint enforces a column to accept or NOT accept NULL values.</td>
	</tr>
</table>


<br/><br/>
<ew/>

<st>ColumnString (Length)</st>
is used for .NET <k>System.String</k> data type.
Variable-size string data. <b>Length</b> is the size in bytes, NOT in char. Max value of <b>Length</b> can be different according to databases.

<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnString(10)]public Column col_char;
	</code>
	<code lang="vb">
			<ColumnString(10)>Public col_char AS Column
	</code>
</code-tab>


<st>ColumnNumeric (Precision, Scale)</st>
is used for any .NET numeric types such as <k>int[16/32/64]</k>, <k>sigle</k>, <k>double</k>, <k>decimal</k> etc.
Precision is an integer that represents the total number of digits allowed in this column.
The scale, also an integer value, represents the number of decimal places to right of the decimal point.
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnNumeric(15, 2)]public Column col_num;
	</code>
	<code lang="vb">
			<ColumnNumeric(15, 2)>Public col_num AS Column
	</code>
</code-tab>

<st>ColumnBoolean</st>
is used for .NET <k>System.Boolean</k> data type.
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnBoolean()]public Column col_bool;
	</code>
	<code lang="vb">
			<ColumnBoolean()>Public col_bool AS Column
	</code>
</code-tab>


<st>ColumnBinary</st>
is used for .NET <k>System.Byte[]</k> data type. 
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnBinary()]public Column col_bin;
	</code>
	<code lang="vb">
			<ColumnBinary()>Public col_bin AS Column
	</code>
</code-tab>

<st>ColumnTime</st>
is used for .NET <k>System.TimeSpan</k> data type. This type of column stores only <b>TIME</b> value of <k>System.TimeSpan</k> as "24hh:mm:dd".
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnTime()]public Column col_tim;
	</code>
	<code lang="vb">
			<ColumnTime()>Public col_tim AS Column
	</code>
</code-tab>


<st>ColumnDate</st>
is used for .NET <k>System.Date</k> data type. This type of column stores only <b>DATE</b> value of <k>System.Date</k> as "yyyy-MM-dd".
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnDate()]public Column col_dat;
	</code>
	<code lang="vb">
			<ColumnDate()>Public col_dat AS Column
	</code>
</code-tab>


<st>ColumnDateTime</st>
is used for .NET <k>System.Date</k> data type. This type of column stores <b>DATE</b> and <b>TIME</b> value of <k>System.Date</k> as "yyyy-MM-dd 24hh-mm-ss".
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnDateTime()]public Column col_dattim;
	</code>
	<code lang="vb">
			<ColumnDateTime()>Public col_dattim AS Column
	</code>
</code-tab>


<st>ColumnRef</st>
is used for columns used repeatedly. <b>Name</b>, <b>Description</b> and <b>Nullable</b> properties can be redefiend.
<br/><br/>
<code-tab>
	<code lang="c#">
			[ColumnRef( reference )]public Column col_ref;
	</code>
	<code lang="vb">
			<ColumnRef( reference )>Public col_ref AS Column
	</code>
</code-tab>