<k>Insert</k> method is used to insert new records to a table.

<st>Definition</st>
<co type="light">
	<small><b>Namespace : </b>Odb.SQL.X</small>
</co>
<code-tab>
	<code lang="c#">
		public static SQL.Insert Insert(bool SetInitials = false) 
	</code>
	<code lang="vb">
		Public Shared Function Insert(SetInitials As Boolean = False) As SQL.Insert
	</code>
</code-tab>


<st>Remarks</st>
Some columns need to be inserted with their default/initial values. <k>SetInitials</k> parameter is set <k>true</k> for setting columns with their initial-value. This parameter is <k>false</k> by default.

Columns which are specified <k>SetInitials = true</k>, accepts values shown below.
<br/>
<br/>
<table>
	<thead>
		<th>ColumnType</th>
		<th>.NET type</th>
		<th>Value</th>
	</thead>
	<tr><td>ColumnString  </td><td><k>System.String</k>																			</td><td>String.Empty					</td></tr>
	<tr><td>ColumnNumeric </td><td>Any .NET numeric types such as <k>int</k>, <k>sigle</k>, <k>double</k>, <k>decimal</k> etc.	</td><td>0								</td></tr>
	<tr><td>ColumnBoolean </td><td><k>System.Boolean</k>																		</td><td>false							</td></tr>
	<tr><td>ColumnBinary  </td><td><k>System.Byte[]</k>																			</td><td>x0								</td></tr>
	<tr><td>ColumnTime    </td><td><k>System.TimeSpan</k>																		</td><td>TimeSpan.Zero					</td></tr>
	<tr><td>ColumnDate    </td><td><k>System.Date</k>																			</td><td>Date.MinValue					</td></tr>
	<tr><td>ColumnDateTime</td><td><k>System.Date</k>																			</td><td>Date.MinValue					</td></tr>
	<tr><td>ColumnRef     </td><td>Reference for <k>User PreDefined</k> column													</td><td>depends on reference ColumnType </td></tr>
</table>


<st>Examples</st>
<ew/>
<br/>
<br/>

Following section demonstrates <b>single table insertion</b>. DocDate is accepted as <k>Date.MinValue</k>.
<code-tab>
	<code lang="c#">
		var _insert = SQL.X.Insert(true);

		for (n = 1; (n <= 100); n++) {
			var row = _insert.AddRow(h.NewModel());
				row.Year = 2017;
				row.Id = n;
				row.Note = String.Concat("Note -", n.toString());
				// row.DocDate = DateTime.Now();
		}
		sql.Execute(cn);
	</code>
	<code lang="vb">
		With SQL.X.Insert(True)
			For n = 1 To 100
				With sql.AddRow(h.NewModel())
					.Year = 2017
					.Id = n
					.Note = String.Concat("Note -", n.toString())
					' .DocDate = DateTime.Now()
				End With
			Next
			.Execute(cn)
		End With
	</code>
</code-tab>
<o>
In this sample, the column <k>h.EnteredDate</k> was not specified. Sql engine of <k>OrmDb</k> sets the column with its inital value according to its type.
</o>

<br/>

Following section demonstrates <b>multiple table insertion</b>.
<code-tab>
	<code lang="c#">
		var sql = SQL.X.Query();

		var _insert = sql.Insert();

		for (n = 1; n <= 100; n++) {
		   var note= String.Concat("Note -", n.toString());

			var r1 = _insert.AddRow(h.NewModel());
				r1.Year = 2017;
				r1.Id = n;
				r1.Note = note;
				r1.DocDate = DateTime.Now();

			for (m = 1; m <= 2; m++) {
				var r2 = _insert.AddRow(l.NewModel());
					r2.Year = r1.Year;
					r2.Id = r1.Id;
					r2.LineId = m;
					r2.Note = note;
			}
		}

		// All commands in query, are being executed as batch.
		sql.Execute(cn)
	</code>
	<code lang="vb">
		With SQL.X.Query()
			Dim _insert = sql.Insert()

			For n = 1 To 100
			   var note= String.Concat("Note -", n.toString())

				Dim r1 = _insert.AddRow(h.NewModel());
					r1.Year = 2017
					r1.Id = n
					r1.Note = note
					r1.DocDate = DateTime.Now()

				For m = 1 To 2
					Dim r2 = _insert.AddRow(l.NewModel())
						r2.Year = r1.Year
						r2.Id = r1.Id
						r2.LineId = m
						r2.Note = note
				Next
			Next

			' All commands in query, are being executed as batch.
			.Execute(cn)
		End With
	</code>
</code-tab>

<br/>