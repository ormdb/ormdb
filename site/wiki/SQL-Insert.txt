**`Insert`** method is used to insert new records to a table.

<br/>

**Definition**
``````XXX
```C#
namespace SQL {
    public class X {

        public static Insert Insert(bool SetInitials = false) 
```
```VB
NameSpace SQL
    Public Class X

        Public Shared Function Insert(SetInitials As Boolean = False) As SQL.Insert
```
``````

<br/>

**Remarks**

Some columns need to be inserted with their default/initial values. **`SetInitials`** parameter is set **`true`** for setting columns with their initial-value. This parameter is **`false`** by default.

Columns which are specified **`SetInitials = true`**, accepts values shown below.

|ColumnType    |.NET type                                                                |Value         |
|--------------|-------------------------------------------------------------------------|--------------|
|ColumnString  |`System.String`                                                          |String.Empty  |
|ColumnNumeric |Any .NET numeric types such as `int`, `sigle`, `double`, `decimal` etc.  |0             |
|ColumnBoolean |`System.Boolean`                                                         |false         |
|ColumnBinary  |`System.Byte[]`                                                          |x0            |
|ColumnTime    |`System.TimeSpan`                                                        |TimeSpan.Zero |
|ColumnDate    |`System.Date`                                                            |Date.MinValue |
|ColumnDateTime|`System.Date`                                                            |Date.MinValue |
|ColumnRef     |Reference for `User PreDefined` column                                   |depends on reference ColumnType|

<br/>

**Examples**

>Examples shown below needs the [Example Header](##OTH-Example-Header).

<br/>

Following section demonstrates **single table insertion**. DocDate is accepted as **`Date.MinValue`**.

``````XXX
```C#
var _insert = SQL.X.Insert(true);

for (n = 1; (n <= 100); n++) {
    var row = _insert.AddRow(h.NewModel());
        row.Year = 2017;
        row.Id = n;
        row.Note = String.Concat("Note -", n.toString());
        // row.DocDate = DateTime.Now();
}

sql.Execute(cn);
```
```VB
With SQL.X.Insert(True)
	For n = 1 To 100
		With sql.AddRow(h.NewModel())
			.Year = 2017
			.Id = n
			.Note = String.Concat("Note -", n.toString())
			' .DocDate = DateTime.Now()
		End With
	Next
	.Execute(cn)
End With
```
``````
> In this sample, the column **`h.EnteredDate`** was not specified. Sql engine of **`OrmDb`** sets the column with its inital value according to its type.

<br/>

Following section demonstrates **multiple table insertion**.

``````XXX
```C#
var sql = SQL.X.Query();

var _insert = sql.Insert();

for (n = 1; n <= 100; n++) {
   var note= String.Concat("Note -", n.toString());

    var r1 = _insert.AddRow(h.NewModel());
        r1.Year = 2017;
        r1.Id = n;
        r1.Note = note;
        r1.DocDate = DateTime.Now();

    for (m = 1; m <= 2; m++) {
        var r2 = _insert.AddRow(l.NewModel());
            r2.Year = r1.Year;
            r2.Id = r1.Id;
            r2.LineId = m;
            r2.Note = note;
    }
}

// All commands in query, are being executed as batch.
sql.Execute(cn)
```
```VB
With SQL.X.Query()
	Dim _insert = sql.Insert()

	For n = 1 To 100
	   var note= String.Concat("Note -", n.toString())

		Dim r1 = _insert.AddRow(h.NewModel());
			r1.Year = 2017
			r1.Id = n
			r1.Note = note
			r1.DocDate = DateTime.Now()

		For m = 1 To 2
			Dim r2 = _insert.AddRow(l.NewModel())
				r2.Year = r1.Year
				r2.Id = r1.Id
				r2.LineId = m
				r2.Note = note
		Next
	Next

	' All commands in query, are being executed as batch.
	.Execute(cn)
End With
```
``````

<br/>