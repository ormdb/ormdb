>All examples needs the [Example Header](##OTH-Example-Header).

<br/>

### Where Operator
WHERE clause is used to filter and extract only records that fulfill a specified condition.

<br/>

``````XXX
```C#
SQL.X.Select().From(h).Where( h.Year == 2018 & 
							  h.DocDate >= DateTime.Now & 
							  h.DocDate <= DateTime.Now );
```
```VB
SQL.X.Select().From(h).Where( h.Year = 2018 And
							  h.DocDate >= DateTime.Now And
							  h.DocDate <= DateTime.Now )
```
``````
<o>
	SELECT * FROM TableHeader AS h <x>WHERE</x> (h.Year = 2018) <x>AND</x> (h.DocDate >= 'DateValue') <x>AND</x> (h.DocDate <= 'DateValue')
</o>
<br/>

Also you can use WHERE clause as shortness within specified as a parameter in **FROM**.

``````XXX
```C#
SQL.X.Select().From(h, h.Year = 2018 & h.IsActive = true );
```
```VB
SQL.X.Select().From(h, h.Year = 2018 And h.IsActive = True)
```
``````
<o>
SELECT * FROM TableHeader AS h <x>WHERE</x> (h.Year = 2018 <x>AND</x> h.IsActive = 1)
</o>
<br/>

### As Operator
Renames a column with an alias.

<br/>

``````XXX
```C#
SQL.X.Select(h.Const("X").AS("flag"), h.Year.As("y1")).From(h);
```
```VB
SQL.X.Select(h.Const("X").AS("flag"), h.Year.As("y1")).From(h)
```
``````
<o>
SELECT 'X' <x>AS</x> flag, h.Year <x>AS</x> y1 FROM TableHeader AS h
</o>
<br/>


### In Operator
**`IN`** command allows you to specify multiple values in a WHERE clause. **`IN`** operator is a shorthand for multiple OR conditions.

<br/>

``````XXX
```C#
SQL.X.Select().From(h).Where( h.Year.In(new[] {2017, 2018}) );
 
SQL.X.Select().From(h).Where( h.Id.NotIn(new[] {"A", "B", "C"}) );
```
```VB
SQL.X.Select().From(h).Where( h.Year.In({2017, 2018}) )

SQL.X.Select().From(h).Where( h.Id.NotIn({"A", "B", "C"}) )
``````
<o>
SELECT * FROM TableHeader AS h WHERE h.Year <x>IN</x> (2017, 2018) <br/>
SELECT * FROM TableHeader AS h WHERE h.Year <x>NOT IN</x> ('A', 'B', 'C')
</o>
<br/>

### Is Null / Is Not Null Operators

``````XXX
```C#
SQL.X.Select().From(h).Where( h.Note.IsNull() );

SQL.X.Select().From(h).Where( h.Note.IsNotNull() );
```
```VB
SQL.X.Select().From(h).Where( h.Note.IsNull() )

SQL.X.Select().From(h).Where( h.Note.IsNotNull() )
```
``````
<o>
SELECT * FROM TableHeader AS h WHERE h.Note <x>IS NULL</x> <br/>
SELECT * FROM TableHeader AS h WHERE h.Note <x>IS NOT NULL</x> <br/>
</o>
<br/>

### Like Operator
**`LIKE`** command is used in a WHERE clause to search for a specified pattern in a column.

<br/>

``````XXX
```C#
SQL.X.Select().From(h).Where( h.Note.CONTAINS("ASD") );

SQL.X.Select().From(h).Where( h.Note.STARTS_WITH("ASD") );

SQL.X.Select().From(h).Where( h.Note.ENDS_WITH("ASD") );
```
```VB
SQL.X.Select().From(h).Where( h.Note.CONTAINS("ASD") )

SQL.X.Select().From(h).Where( h.Note.STARTS_WITH("ASD") )

SQL.X.Select().From(h).Where( h.Note.ENDS_WITH("ASD") )
``````
<o>
SELECT * FROM TableHeader AS h WHERE h.Note <x>LIKE</x> '<x>%</x>ASD<x>%</x>' <br/>
SELECT * FROM TableHeader AS h WHERE h.Note <x>LIKE</x> 'ASD<x>%</x>' <br/>
SELECT * FROM TableHeader AS h WHERE h.Note <x>LIKE</x> '<x>%</x>ASD' <br/>
</o>
<br/>

### Asc / Desc Operators
**`ASC`** / **`DESC`** command is used to sort the data returned in ascending/descending  order.

<br/>

``````XXX
```C#
SQL.X.Select().From(h).OrderBy(h.Year, h.DocDate.Desc());
```
```VB
SQL.X.Select().From(h).OrderBy(h.Year, h.DocDate.Desc())
```
``````
<o>
SELECT * FROM TableHeader AS h  <x>ORDER BY</x> h.Year, h.DocDate <x>DESC</x>
</o>
<br/>

### Count 

``````XXX
```C#
SQL.X.Select(h.All.COUNT()).From(h);
```
```VB
SQL.X.Select(h.All.COUNT()).From(h)
```
``````
<o>
SELECT <x>COUNT(*)</x> FROM TableHeader AS h
</o>
<br/>

### Distinct 

``````XXX
```C#
SQL.X.Select(h.Id.DISTINCT()).From(h);
```
```VB
SQL.X.Select(h.Id.DISTINCT()).From(h)
```
``````
<o>
SELECT <x>DISTINCT(h.Id)</x> FROM TableHeader AS h
</o>
<br/>

### Coalesce 

``````XXX
```C#
SQL.X.Select(h.Id.COALESCE(9999)).From(h);
```
```VB
SQL.X.Select(h.Id.COALESCE(9999)).From(h)
```
``````
<o>
SELECT <x>COALESCE(h.Id, 9999)</x> FROM TableHeader AS h<br/>
SELECT <x>IFNULL(h.Id, 9999)</x> FROM TableHeader AS h<br/>
</o>
<br/>

### Aggregate Functions 

``````XXX
```C#
SQL.X.Select(h.Year, h.Id.AVG()).From(h).GroupBy(h.Year);

SQL.X.Select(h.Year, h.Id.MIN()).From(h).GroupBy(h.Year);

SQL.X.Select(h.Year, h.Id.MAX()).From(h).GroupBy(h.Year);

SQL.X.Select(h.Year, h.Id.SUM()).From(h).GroupBy(h.Year);

```
```VB
SQL.X.Select(h.Year, h.Id.AVG()).From(h).GroupBy(h.Year)

SQL.X.Select(h.Year, h.Id.MIN()).From(h).GroupBy(h.Year)

SQL.X.Select(h.Year, h.Id.MAX()).From(h).GroupBy(h.Year)

SQL.X.Select(h.Year, h.Id.SUM()).From(h).GroupBy(h.Year)
```
``````
<o>
SELECT h.Year, <x>AVG(h.Id)</x> FROM TableHeader AS h <x>GROUP BY</x> h.Year <br/>
SELECT h.Year, <x>MIN(h.Id)</x> FROM TableHeader AS h <x>GROUP BY</x> h.Year <br/>
SELECT h.Year, <x>MAX(h.Id)</x> FROM TableHeader AS h <x>GROUP BY</x> h.Year <br/>
SELECT h.Year, <x>SUM(h.Id)</x> FROM TableHeader AS h <x>GROUP BY</x> h.Year <br/>
</o>
<br/>

### String Functions 

<br/>

``````XXX
```C#
SQL.X.Select(h.Note.LEFT(4).RIGHT(2)).From(h);

SQL.X.Select(h.Note.SUBSTRING(2, 4)).From(h);

SQL.X.Select(h.Note.UPPER()).From(h);

SQL.X.Select(h.Note.LOWER()).From(h);

SQL.X.Select(h.Note.RTRIM().LTRIM()).From(h);

SQL.X.Select(h.Year.CONCAT(h.Id).CONCAT("X")).From(h);
```
```VB
SQL.X.Select(h.Note.LEFT(4).RIGHT(2)).From(h)

SQL.X.Select(h.Note.SUBSTRING(2, 4)).From(h)

SQL.X.Select(h.Note.UPPER()).From(h)

SQL.X.Select(h.Note.LOWER()).From(h)

SQL.X.Select(h.Note.RTRIM().LTRIM()).From(h)

SQL.X.Select(h.Year.CONCAT(h.Id).CONCAT("X")).From(h)
```
``````

<br/>