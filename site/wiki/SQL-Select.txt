**`Select`** method is used to select data from a database. 

You can access each column of the returned row by passing the name or ordinal number of the column to the [DataReader](##OTH-DataReader) or [DataTable](##OTH-DataTable). 

>Please read [DataReader](##OTH-DataReader) or [DataTable](##OTH-DataTable) for further information.

<br/>

**Definition**

``````XXX
```C#
namespace SQL {
    public class X {

        public static Select Select(params Table.Column[] items){}
```
```VB
NameSpace SQL
    Public Class X

        Public Shared Function Select(ParamArray items() As Table.Column) As Select
```
``````

<br/>

**Examples**

>Examples shown below needs the [Example Header](##OTH-Example-Header).
>All SQL statments uses [DataReader](##OTH-DataReader) or [DataTable](##OTH-DataTable).

<br/>

Following section demonstrates **Reqular Select**.

``````XXX
```C#
var sql = SQL.X.Select(h.Year, h.Id).From(h);

// ... Read by [DataReader] or [DataTable]
```
```VB
Dim sql = SQL.X.Select(h.Year, h.Id).From(h)

' ... Read by [DataReader] or [DataTable]
```
``````
<br/>

Following section demonstrates using **Conditional Where** clause.
``````XXX
```C#
var _where = (h.Year == 2017);

var _condition = true;
if( _condition ){
    _where = _where & (h.IsActive == true)
}

var sql = SQL.X.Select(h.Year, h.Id).From(h, _where);

// ... Read by [DataReader] or [DataTable]
```
```VB
Dim _where = (h.Year = 2017)

Dim _condition = True
If _condition Then
    _where = _where And (h.IsActive = True)
End If

Dim sql = SQL.X.Select(h.Year, h.Id).From(h, _where)

' ... Read by [DataReader] or [DataTable]
```
``````
<br/>

Following section demonstrates using **COUNT** clause.
``````XXX
```C#
var sql = SQL.X.Select().From(h).Where( 
						h.Year.In( new[] {2018, 2019} ) &
						h.Id.IsNotNull()) ;

var count = sql.ExecuteCount(cn);
```
```VB
Dim sql = SQL.X.Select().From(h).Where( 
						h.Year.In( {2018, 2019} ) And
						h.Id.IsNotNull())

Dim count = sql.ExecuteCount(cn)
```
``````
<br/>


Following section demonstrates using **JOIN** clause.
``````XXX
```C#
var sql = SQL.X.Select().From(h)
	sql.LeftJoin(l, l.Year==h.Year & l.Id == h.Id )
    sql.Where( h.Year.In(new[] {2018, 2019}) & h.Id.IsNotNull() );

// ... Read by [DataReader] or [DataTable]

```
```VB
With SQL.X.Select().From(h)
	.LeftJoin(l, l.Year=h.Year And l.Id = h.Id )
    .Where( h.Year.In( {2018, 2019} ) And h.Id.IsNotNull() )

	' ... Read by [DataReader] or [DataTable]
End With
```
``````

<br/>

Following section demonstrates using **SKIP** and **TOP** clause.
``````XXX
```C#
var sql = SQL.X.Select().From(h).Skip(5).Top(10).OrderBy(h.Year);

// ... Read by [DataReader] or [DataTable]
```
```VB
Dim sql = SQL.X.Select().From(h).Skip(5).Top(10).OrderBy(h.Year)

' ... Read by [DataReader] or [DataTable]
```
``````

<br/>

Following section demonstrates using **GROUP BY** clause.
``````XXX
```C#
var _yr_min = h.Year.MIN().AS("_date_min");
var _yr_max = h.Year.MAX().AS("_date_max");

var sql = SQL.X.Select(h.Id, _yr_min, _yr_max).From(h).GroupBy(h.Id);

// ... Read by [DataReader] or [DataTable]
```
```VB
Dim _yr_min = h.Year.MIN().AS("_date_min")
Dim _yr_max = h.Year.MAX().AS("_date_max")

Dim sql = SQL.X.Select(h.Id, _yr_min, _yr_max).From(h).GroupBy(h.Id)

' ... Read by [DataReader] or [DataTable]
```
``````

<br/>

Following section demonstrates using **UNION** clause.
``````XXX
```C#
var sql= SQL.X.Union();
    sql.RemoveDuplicates = true;

    sql.Select().From(h, h.Id == 1000).Top(1).OrderBy(h.Id);
    sql.Select().From(h, h.Id == 2000).Top(1).OrderBy(h.Id);
    sql.OrderBy(h.DocDate);

// ... Read by [DataReader] or [DataTable]

```
```VB
With SQL.X.Union()
    .RemoveDuplicates = True

	.Select().From(h, h.Id = 1000).Top(1).OrderBy(h.Id)
	.Select().From(h, h.Id = 2000).Top(1).OrderBy(h.Id)
	.OrderBy(h.DocDate)

	' ... Read by [DataReader] or [DataTable]
End With
```
``````

<br/>

Following section demonstrates using **SUB SELECT** clause.
``````XXX
```C#
var sq1 = SQL.X.Select().From(h, h.Id == 1000).ToSubQuery();
var sq2 = SQL.X.Select().From(h, h.Id == 2000).ToSubQuery();

var sql = SQL.X.Select();
    sql.From(sq1);
    sql.LeftJoin(sq2, sq2(h.Id) == sq1(l.Id));
    sql.Where( sq1(h.Year) == 2017) ;

// ... Read by [DataReader] or [DataTable]

```
```VB
Dim sq1 = SQL.X.Select().From(h, h.Id = 1000).ToSubQuery()
Dim sq2 = SQL.X.Select().From(h, h.Id = 2000).ToSubQuery()

With SQL.X.Select()
    .From(sq1)
    .LeftJoin(sq2, sq2(h.Id) = sq1(l.Id))
    .Where( sq1(h.Year) = 2017 )

	' ... Read by [DataReader] or [DataTable]
End With
```
``````

<br/>

Following section demonstrates using **SUB SELECT** in a **WHERE** block.

``````XXX
```C#
var sq = SQL.X.Select(h.DocumentId.DISTINCT()).From(h, h.Id == 1000).ToSubQuery();

var sql = SQL.X.Select().From(h, h.Id == sq);

// ... Read by [DataReader] or [DataTable]
```
```VB
Dim sq = SQL.X.Select(h.DocumentId.DISTINCT()).From(h, h.Id = 1000).ToSubQuery()

Dim sql = SQL.X.Select().From(h, h.Id = sq)

' ... Read by [DataReader] or [DataTable]
```
``````

<br/>