**`Select`** method is used to select data from a database. 

You can access each column of the returned row by passing the name or ordinal number of the column to the [DataReader](##GEN-DataReader) or [DataTable](##GEN-DataTable). 

>Please read [DataReader](##GEN-DataReader) or [DataTable](##GEN-DataTable) for further information.

<br/>

**Definition**
```C#
namespace SQL {
    public class X {

        public static Select Select(params Table.Column[] items){}
```

<br/>

**Examples**

>Examples shown below needs the [Example Header](##OTH-Example-Header).
>All SQL statments uses [DataReader](##GEN-DataReader) or [DataTable](##GEN-DataTable).

<br/>

Following section demonstrates **Reqular Select**.
```C#
var sql = SQL.X.Select(h.Year, h.Id).From(h);

// ... Read by [DataReader] or [DataTable]
```
<br/>

Following section demonstrates using **Conditional Where** clause.
```C#
var sql = SQL.X.Select(h.Year, h.Id).From(h);
    sql.Where = (h.Year == 2017)

var _onlyActive = true;
if( _onlyActive ){
    sql.Where = sql.Where & (h.IsActive == true)
}

// ... Read by [DataReader] or [DataTable]
```
<br/>

Following section demonstrates using **COUNT** clause.
```C#
var sql = SQL.X.Select().From(h)
    sql.Where = h.Year.In(new[] {2018, 2019}) &
                h.Id.IsNotNull();

var count = sql.ExecuteCount(cn);
```
<br/>


Following section demonstrates using **JOIN** clause.
```C#
var sql = SQL.X.Select().From(h).LeftJoin(l, l.Year==h.Year & l.Id == h.Id )
    sql.Where = h.Year.In(new[] {2018, 2019}) &
                h.Id.IsNotNull();

// ... Read by [DataReader] or [DataTable]
```
<br/>

Following section demonstrates using **SKIP** and **TOP** clause.
```C#
var sql = SQL.X.Select().From(h).Skip(5).Top(10).OrderBy(h.Year);

// ... Read by [DataReader] or [DataTable]
```

<br/>

Following section demonstrates using **GROUP BY** clause.
```C#
var _yr_min = h.Year.MIN().AS("_date_min");
var _yr_max = h.Year.MAX().AS("_date_max");

var sql = SQL.X.Select(h.Id, _yr_min, _yr_max).From(h).GroupBy(h.Id);

// ... Read by [DataReader] or [DataTable]
```

<br/>

Following section demonstrates using **UNION** clause.
```C#
var sql= SQL.X.Union();
    sql.RemoveDuplicates = true;

    sql.Select().From(h, h.Id == 1000).Top(1).OrderBy(h.Id);
    sql.Select().From(h, h.Id == 2000).Top(1).OrderBy(h.Id);
    sql.OrderBy(h.DocDate);

// ... Read by [DataReader] or [DataTable]
```

<br/>

Following section demonstrates using **SUB SELECT** clause.
```C#
var sq1 = SQL.X.Select().From(h, h.Id == 1000).ToSubQuery();
var sq2 = SQL.X.Select().From(h, h.Id == 2000).ToSubQuery();

var sql = SQL.X.Select();
    sql.From(sq1);
    sql.LeftJoin(sq2, sq2(h.Id) == sq1(l.Id));
    sql.Where = (sq1(h.Year) == 2017);

// ... Read by [DataReader] or [DataTable]
```

<br/>

Following section demonstrates using **SUB SELECT** in a **WHERE** block.
```C#
var sq = SQL.X.Select(h.DocumentId.DISTINCT()).From(h, h.Id == 1000).ToSubQuery();

var sql = SQL.X.Select().From(h, h.Id == sq);

// ... Read by [DataReader] or [DataTable]
```
